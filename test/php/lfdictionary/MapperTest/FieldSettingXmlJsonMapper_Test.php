<?php
use \libraries\languageforge\lfdictionary\environment\LexProject;
use \libraries\languageforge\lfdictionary\mapper\FieldSettingXmlJsonMapper;

require_once(dirname(__FILE__) . '/../../TestConfig.php');
require_once(SIMPLETEST_PATH . 'autorun.php');
require_once(dirname(__FILE__) . '/../MockObject/LexProjectMockObject.php');

class TestOfFieldSettingXmlJsonMapper extends UnitTestCase {

	private $FINAL_RESULT_ARRAY = "Array([fields] => Array([field] => Array([0] => Array([className] => Array([$] => LexEntry)[dataType] => Array([$] => MultiText)[displayName] => Array([$] => Word)[enabled] => Array([$] => True)[fieldName] => Array([$] => EntryLexicalForm)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => False)[multiplicity] => Array([$] => ZeroOr1)[visibility] => Array([$] => Visible)[writingSystems] => Array([id] => Array([0] => Array([$] => qaa)))[index] => 1)[1] => Array([className] => Array([$] => LexEntry)[dataType] => Array([$] => MultiText)[displayName] => Array([$] => Citation Form)[enabled] => Array([$] => False)[fieldName] => Array([$] => citation)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => False)[multiplicity] => Array([$] => ZeroOr1)[visibility] => Array([$] => NormallyHidden)[writingSystems] => Array([id] => Array([0] => Array([$] => qaa)))[index] => 2)[2] => Array([className] => Array([$] => LexSense)[dataType] => Array([$] => MultiText)[displayName] => Array([$] => Definition (Meaning))[enabled] => Array([$] => True)[fieldName] => Array([$] => definition)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => True)[multiplicity] => Array([$] => ZeroOr1)[visibility] => Array([$] => Visible)[writingSystems] => Array([id] => Array([0] => Array([$] => en)))[index] => 3)[3] => Array([className] => Array([$] => LexSense)[dataType] => Array([$] => MultiText)[displayName] => Array([$] => Gloss)[enabled] => Array([$] => False)[fieldName] => Array([$] => gloss)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => True)[multiplicity] => Array([$] => ZeroOr1)[visibility] => Array([$] => NormallyHidden)[writingSystems] => Array([id] => Array([0] => Array([$] => en)))[index] => 4)[4] => Array([className] => Array([$] => LexEntry)[dataType] => Array([$] => MultiText)[displayName] => Array([$] => Literal Meaning)[enabled] => Array([$] => False)[fieldName] => Array([$] => literal-meaning)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => True)[multiplicity] => Array([$] => ZeroOr1)[visibility] => Array([$] => NormallyHidden)[writingSystems] => Array([id] => Array([0] => Array([$] => en)))[index] => 5)[5] => Array([className] => Array([$] => PalasoDataObject)[dataType] => Array([$] => MultiText)[displayName] => Array([$] => Note)[enabled] => Array([$] => True)[fieldName] => Array([$] => note)[multiParagraph] => Array([$] => True)[spellCheckingEnabled] => Array([$] => True)[multiplicity] => Array([$] => ZeroOr1)[visibility] => Array([$] => NormallyHidden)[writingSystems] => Array([id] => Array([0] => Array([$] => en)))[index] => 6)[6] => Array([className] => Array([$] => LexSense)[dataType] => Array([$] => Picture)[displayName] => Array([$] => Picture)[enabled] => Array([$] => True)[fieldName] => Array([$] => Picture)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => False)[multiplicity] => Array([$] => ZeroOr1)[visibility] => Array([$] => NormallyHidden)[writingSystems] => Array([id] => Array([0] => Array([$] => en)))[index] => 7)[7] => Array([className] => Array([$] => LexSense)[dataType] => Array([$] => Option)[displayName] => Array([$] => PartOfSpeech)[enabled] => Array([$] => True)[fieldName] => Array([$] => POS)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => False)[multiplicity] => Array([$] => ZeroOr1)[optionsListFile] => Array([$] => PartsOfSpeech.xml)[visibility] => Array([$] => Visible)[writingSystems] => Array([id] => Array([0] => Array([$] => en)))[index] => 8)[8] => Array([className] => Array([$] => LexExampleSentence)[dataType] => Array([$] => MultiText)[displayName] => Array([$] => Example Sentence)[enabled] => Array([$] => True)[fieldName] => Array([$] => ExampleSentence)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => True)[multiplicity] => Array([$] => ZeroOr1)[visibility] => Array([$] => Visible)[writingSystems] => Array([id] => Array([0] => Array([$] => qaa)))[index] => 9)[9] => Array([className] => Array([$] => LexExampleSentence)[dataType] => Array([$] => MultiText)[displayName] => Array([$] => Example Translation)[enabled] => Array([$] => False)[fieldName] => Array([$] => ExampleTranslation)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => True)[multiplicity] => Array([$] => ZeroOr1)[visibility] => Array([$] => Visible)[writingSystems] => Array([id] => Array([0] => Array([$] => en)))[index] => 10)[10] => Array([className] => Array([$] => LexSense)[dataType] => Array([$] => OptionCollection)[displayName] => Array([$] => Sem Dom)[enabled] => Array([$] => True)[fieldName] => Array([$] => semantic-domain-ddp4)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => False)[multiplicity] => Array([$] => ZeroOr1)[optionsListFile] => Array([$] => Ddp4.xml)[visibility] => Array([$] => NormallyHidden)[writingSystems] => Array([id] => Array([0] => Array([$] => en)))[index] => 11)[11] => Array([className] => Array([$] => LexEntry)[dataType] => Array([$] => RelationToOneEntry)[displayName] => Array([$] => Base Form)[enabled] => Array([$] => False)[fieldName] => Array([$] => BaseForm)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => False)[multiplicity] => Array([$] => ZeroOr1)[visibility] => Array([$] => NormallyHidden)[writingSystems] => Array([id] => Array([0] => Array([$] => qaa)))[index] => 12)[12] => Array([className] => Array([$] => LexEntry)[dataType] => Array([$] => RelationToOneEntry)[displayName] => Array([$] => Cross Reference)[enabled] => Array([$] => False)[fieldName] => Array([$] => confer)[multiParagraph] => Array([$] => False)[spellCheckingEnabled] => Array([$] => False)[multiplicity] => Array([$] => ZeroOrMore)[visibility] => Array([$] => NormallyHidden)[writingSystems] => Array([id] => Array([0] => Array([$] => qaa)))[index] => 13))))";
	private $FINAL_RESULT_UPDATED_XML = '<?xml version="1.0" encoding="utf-8"?><configuration version="8"><components><viewTemplate><fields><field index="1"><className>LexEntry</className><dataType>MultiText</dataType><displayName>Word</displayName><enabled>True</enabled><fieldName>EntryLexicalForm</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>False</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><visibility>Visible</visibility><writingSystems><id>qaa</id></writingSystems></field><field index="2"><className>LexEntry</className><dataType>MultiText</dataType><displayName>Citation Form</displayName><enabled>False</enabled><fieldName>citation</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>False</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><visibility>NormallyHidden</visibility><writingSystems><id>qaa</id></writingSystems></field><field index="3"><className>LexSense</className><dataType>MultiText</dataType><displayName>Definition (Meaning)</displayName><enabled>True</enabled><fieldName>definition</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>True</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><visibility>Visible</visibility><writingSystems><id>en</id></writingSystems></field><field index="4"><className>LexSense</className><dataType>MultiText</dataType><displayName>Gloss</displayName><enabled>False</enabled><fieldName>gloss</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>True</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><visibility>NormallyHidden</visibility><writingSystems><id>en</id></writingSystems></field><field index="5"><className>LexEntry</className><dataType>MultiText</dataType><displayName>Literal Meaning</displayName><enabled>False</enabled><fieldName>literal-meaning</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>True</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><visibility>NormallyHidden</visibility><writingSystems><id>en</id></writingSystems></field><field index="6"><className>PalasoDataObject</className><dataType>MultiText</dataType><displayName>Note</displayName><enabled>True</enabled><fieldName>note</fieldName><multiParagraph>True</multiParagraph><spellCheckingEnabled>True</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><visibility>NormallyHidden</visibility><writingSystems><id>en</id></writingSystems></field><field index="7"><className>LexSense</className><dataType>Picture</dataType><displayName>Picture</displayName><enabled>True</enabled><fieldName>Picture</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>False</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><visibility>NormallyHidden</visibility><writingSystems><id>en</id></writingSystems></field><field index="8"><className>LexSense</className><dataType>Option</dataType><displayName>PartOfSpeech</displayName><enabled>True</enabled><fieldName>POS</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>False</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><optionsListFile>PartsOfSpeech.xml</optionsListFile><visibility>Visible</visibility><writingSystems><id>en</id></writingSystems></field><field index="9"><className>LexExampleSentence</className><dataType>MultiText</dataType><displayName>Example Sentence</displayName><enabled>True</enabled><fieldName>ExampleSentence</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>True</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><visibility>Visible</visibility><writingSystems><id>qaa</id></writingSystems></field><field index="10"><className>LexExampleSentence</className><dataType>MultiText</dataType><displayName>Example Translation</displayName><enabled>False</enabled><fieldName>ExampleTranslation</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>True</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><visibility>Visible</visibility><writingSystems><id>en</id></writingSystems></field><field index="11"><className>LexSense</className><dataType>OptionCollection</dataType><displayName>Sem Dom</displayName><enabled>True</enabled><fieldName>semantic-domain-ddp4</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>False</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><optionsListFile>Ddp4.xml</optionsListFile><visibility>NormallyHidden</visibility><writingSystems><id>en</id></writingSystems></field><field index="12"><className>LexEntry</className><dataType>RelationToOneEntry</dataType><displayName>Base Form</displayName><enabled>False</enabled><fieldName>BaseForm</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>False</spellCheckingEnabled><multiplicity>ZeroOr1</multiplicity><visibility>NormallyHidden</visibility><writingSystems><id>qaa</id></writingSystems></field><field index="13"><className>LexEntry</className><dataType>RelationToOneEntry</dataType><displayName>Cross Reference</displayName><enabled>False</enabled><fieldName>confer</fieldName><multiParagraph>False</multiParagraph><spellCheckingEnabled>False</spellCheckingEnabled><multiplicity>ZeroOrMore</multiplicity><visibility>NormallyHidden</visibility><writingSystems><id>qaa</id></writingSystems></field></fields><id>Default View Template</id></viewTemplate></components><tasks><task index="1" taskName="Dashboard" visible="true"/><task index="2" taskName="Dictionary" visible="true"/><task index="3" taskName="AddMissingInfo" visible="false"><label>Meanings</label><longLabel>Add Meanings</longLabel><description>Add meanings (senses) to entries where they are missing.</description><field>definition</field><showFields>definition</showFields><readOnly>semantic-domain-ddp4</readOnly><writingSystemsToMatch/><writingSystemsWhichAreRequired/></task><task index="4" taskName="AddMissingInfo" visible="false"><label>Parts of Speech</label><longLabel>Add Parts of Speech</longLabel><description>Add parts of speech to senses where they are missing.</description><field>POS</field><showFields>POS</showFields><readOnly>definition, ExampleSentence</readOnly><writingSystemsToMatch/><writingSystemsWhichAreRequired/></task><task index="5" taskName="AddMissingInfo" visible="false"><label>Example Sentences</label><longLabel>Add Example Sentences</longLabel><description>Add example sentences to senses where they are missing.</description><field>ExampleSentence</field><showFields>ExampleSentence</showFields><readOnly>definition</readOnly><writingSystemsToMatch/><writingSystemsWhichAreRequired/></task><task index="6" taskName="AddMissingInfo" visible="false"><label>Base Forms</label><longLabel>Add Base Forms</longLabel><description>Identify the "base form" word that this word is built from. In the printed dictionary, the derived or variant words can optionally be shown as subentries of their base forms.</description><field>BaseForm</field><showFields>BaseForm</showFields><readOnly/><writingSystemsToMatch/><writingSystemsWhichAreRequired/></task><task index="7" taskName="AdvancedHistory" visible="false"/><task index="8" taskName="NotesBrowser" visible="false"/><task index="9" taskName="GatherWordList" visible="false"><wordListFileName>SILCAWL</wordListFileName><wordListWritingSystemId>en</wordListWritingSystemId></task><task index="10" taskName="GatherWordList" visible="false"><wordListFileName>SILCAWL-MozambiqueAddendum</wordListFileName><wordListWritingSystemId>en</wordListWritingSystemId></task><task index="11" taskName="GatherWordsBySemanticDomains" visible="true"><semanticDomainsQuestionFileName>Ddp4Questions-en.xml</semanticDomainsQuestionFileName><showMeaningField>False</showMeaningField></task></tasks><addins><addin id="SendReceiveAction" showInWeSay="True"/></addins></configuration>';
	private $NEW_JSON_SETTING = "{\"fields\":{\"field\":[{\"className\":{\"$\":\"LexEntry\"}, \"dataType\":{\"$\":\"MultiText\"}, \"displayName\":{\"$\":\"WordA\"}, \"enabled\":{\"$\":\"False\"}, \"fieldName\":{\"$\":\"EntryLexicalForm\"}, \"multiParagraph\":{\"$\":\"False\"}, \"spellCheckingEnabled\":{\"$\":\"False\"}, \"multiplicity\":{\"$\":\"ZeroOr1\"}, \"visibility\":{\"$\":\"Visible\"}, \"writingSystems\":{\"id\":[{\"$\":\"en\"},{\"$\":\"th\"},{\"$\":\"qaa\"},{\"$\":\"aas-fonipa\"}]}, \"availableWritingSystems\":{\"id\":[{\"$\":\"en\"},{\"$\":\"th\"},{\"$\":\"qaa\"},{\"$\":\"aas-fonipa\"},{\"$\":\"aas\"},{\"$\":\"aiw-Ethi-AL-x-x-dupl0\"},{\"$\":\"aiw-Latn-BY-x-x-111111\"},{\"$\":\"aiw-Zxxx-x-audio\"},{\"$\":\"aiw-fonipa-x-etic\"},{\"$\":\"aiw-fonipa\"},{\"$\":\"aiw\"},{\"$\":\"es\"},{\"$\":\"fr\"},{\"$\":\"id\"},{\"$\":\"qaa-Zxxx-x-audio\"},{\"$\":\"qaa-fonipa\"},{\"$\":\"tpi-fonipa\"},{\"$\":\"tpi\"},{\"$\":\"tpx\"}]},\"index\":\"1\"}]}}";
	function testFieldSettingXmlJsonMapper_XmlToJsonArray() {
		$LexProjectMockObject = new LexProjectMockObject();
		
		$configFilePath = $LexProjectMockObject->getUserSettingsFilePath("user1");
		$xml_str = file_get_contents($configFilePath);
		$doc = new \DOMDocument;
		$doc->preserveWhiteSpace = FALSE;
		$doc->loadXML($xml_str);
		$componentsDoc = new \DomDocument;
		$componentsDoc->appendChild($componentsDoc->importNode($doc->getElementsByTagName("fields")->item(0), true));
		$jsonText = print_r(FieldSettingXmlJsonMapper::encodeFieldXmlToJson($componentsDoc),true);
		$jsonText = str_replace("\n", "", $jsonText);
		$jsonText = str_replace("\r", "", $jsonText);
		$jsonText = str_replace("  ", "", $jsonText);
		$this->assertEqual($jsonText,$this->FINAL_RESULT_ARRAY);
	}

	function testFieldSettingXmlJsonMapper_XmlUpdateByJsonArray() {
		$LexProjectMockObject = new LexProjectMockObject();
		$configFilePath = $LexProjectMockObject->getUserSettingsFilePath("user1");
		$xml_str = file_get_contents($configFilePath);
		$doc = new \DOMDocument;
		$doc->preserveWhiteSpace = FALSE;
		$doc->loadXML($xml_str);
		FieldSettingXmlJsonMapper::updateFieldXmlFromJson(json_decode($this->NEW_JSON_SETTING),$doc);
		$xmlText = $doc->saveXML();
		// let DomDocument reformat it.
		$updateXmlDoc = new \DOMDocument;
		$updateXmlDoc->preserveWhiteSpace = FALSE;
		$updateXmlDoc->loadXML($this->FINAL_RESULT_UPDATED_XML);
		$updateXmlText = $updateXmlDoc->saveXML();
		$this->assertEqual($updateXmlText,$xmlText);
	}

}

?>