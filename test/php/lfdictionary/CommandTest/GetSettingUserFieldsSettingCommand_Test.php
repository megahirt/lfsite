<?php
use libraries\lfdictionary\commands\GetSettingUserFieldsSettingCommand;

require_once(dirname(__FILE__) . '/../../TestConfig.php');
require_once(SimpleTestPath . 'autorun.php');
require_once(dirname(__FILE__) . '/../MockObject/LexProjectMockObject.php');

class GetSettingUserFieldsSettingCommand_Test extends UnitTestCase {

	private $FINAL_RESULT="{\"fields\":{\"field\":[{\"className\":{\"$\":\"LexEntry\"},\"dataType\":{\"$\":\"MultiText\"},\"displayName\":{\"$\":\"Word\"},\"enabled\":{\"$\":\"True\"},\"fieldName\":{\"$\":\"EntryLexicalForm\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"False\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"visibility\":{\"$\":\"Visible\"},\"writingSystems\":{\"id\":[{\"$\":\"qaa\"}]},\"index\":\"1\"},{\"className\":{\"$\":\"LexEntry\"},\"dataType\":{\"$\":\"MultiText\"},\"displayName\":{\"$\":\"Citation Form\"},\"enabled\":{\"$\":\"False\"},\"fieldName\":{\"$\":\"citation\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"False\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"visibility\":{\"$\":\"NormallyHidden\"},\"writingSystems\":{\"id\":[{\"$\":\"qaa\"}]},\"index\":\"2\"},{\"className\":{\"$\":\"LexSense\"},\"dataType\":{\"$\":\"MultiText\"},\"displayName\":{\"$\":\"Definition (Meaning)\"},\"enabled\":{\"$\":\"True\"},\"fieldName\":{\"$\":\"definition\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"True\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"visibility\":{\"$\":\"Visible\"},\"writingSystems\":{\"id\":[{\"$\":\"en\"}]},\"index\":\"3\"},{\"className\":{\"$\":\"LexSense\"},\"dataType\":{\"$\":\"MultiText\"},\"displayName\":{\"$\":\"Gloss\"},\"enabled\":{\"$\":\"False\"},\"fieldName\":{\"$\":\"gloss\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"True\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"visibility\":{\"$\":\"NormallyHidden\"},\"writingSystems\":{\"id\":[{\"$\":\"en\"}]},\"index\":\"4\"},{\"className\":{\"$\":\"LexEntry\"},\"dataType\":{\"$\":\"MultiText\"},\"displayName\":{\"$\":\"Literal Meaning\"},\"enabled\":{\"$\":\"False\"},\"fieldName\":{\"$\":\"literal-meaning\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"True\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"visibility\":{\"$\":\"NormallyHidden\"},\"writingSystems\":{\"id\":[{\"$\":\"en\"}]},\"index\":\"5\"},{\"className\":{\"$\":\"PalasoDataObject\"},\"dataType\":{\"$\":\"MultiText\"},\"displayName\":{\"$\":\"Note\"},\"enabled\":{\"$\":\"True\"},\"fieldName\":{\"$\":\"note\"},\"multiParagraph\":{\"$\":\"True\"},\"spellCheckingEnabled\":{\"$\":\"True\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"visibility\":{\"$\":\"NormallyHidden\"},\"writingSystems\":{\"id\":[{\"$\":\"en\"}]},\"index\":\"6\"},{\"className\":{\"$\":\"LexSense\"},\"dataType\":{\"$\":\"Picture\"},\"displayName\":{\"$\":\"Picture\"},\"enabled\":{\"$\":\"True\"},\"fieldName\":{\"$\":\"Picture\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"False\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"visibility\":{\"$\":\"NormallyHidden\"},\"writingSystems\":{\"id\":[{\"$\":\"en\"}]},\"index\":\"7\"},{\"className\":{\"$\":\"LexSense\"},\"dataType\":{\"$\":\"Option\"},\"displayName\":{\"$\":\"PartOfSpeech\"},\"enabled\":{\"$\":\"True\"},\"fieldName\":{\"$\":\"POS\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"False\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"optionsListFile\":{\"$\":\"PartsOfSpeech.xml\"},\"visibility\":{\"$\":\"Visible\"},\"writingSystems\":{\"id\":[{\"$\":\"en\"}]},\"index\":\"8\"},{\"className\":{\"$\":\"LexExampleSentence\"},\"dataType\":{\"$\":\"MultiText\"},\"displayName\":{\"$\":\"Example Sentence\"},\"enabled\":{\"$\":\"True\"},\"fieldName\":{\"$\":\"ExampleSentence\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"True\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"visibility\":{\"$\":\"Visible\"},\"writingSystems\":{\"id\":[{\"$\":\"qaa\"}]},\"index\":\"9\"},{\"className\":{\"$\":\"LexExampleSentence\"},\"dataType\":{\"$\":\"MultiText\"},\"displayName\":{\"$\":\"Example Translation\"},\"enabled\":{\"$\":\"False\"},\"fieldName\":{\"$\":\"ExampleTranslation\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"True\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"visibility\":{\"$\":\"Visible\"},\"writingSystems\":{\"id\":[{\"$\":\"en\"}]},\"index\":\"10\"},{\"className\":{\"$\":\"LexSense\"},\"dataType\":{\"$\":\"OptionCollection\"},\"displayName\":{\"$\":\"Sem Dom\"},\"enabled\":{\"$\":\"True\"},\"fieldName\":{\"$\":\"semantic-domain-ddp4\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"False\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"optionsListFile\":{\"$\":\"Ddp4.xml\"},\"visibility\":{\"$\":\"NormallyHidden\"},\"writingSystems\":{\"id\":[{\"$\":\"en\"}]},\"index\":\"11\"},{\"className\":{\"$\":\"LexEntry\"},\"dataType\":{\"$\":\"RelationToOneEntry\"},\"displayName\":{\"$\":\"Base Form\"},\"enabled\":{\"$\":\"False\"},\"fieldName\":{\"$\":\"BaseForm\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"False\"},\"multiplicity\":{\"$\":\"ZeroOr1\"},\"visibility\":{\"$\":\"NormallyHidden\"},\"writingSystems\":{\"id\":[{\"$\":\"qaa\"}]},\"index\":\"12\"},{\"className\":{\"$\":\"LexEntry\"},\"dataType\":{\"$\":\"RelationToOneEntry\"},\"displayName\":{\"$\":\"Cross Reference\"},\"enabled\":{\"$\":\"False\"},\"fieldName\":{\"$\":\"confer\"},\"multiParagraph\":{\"$\":\"False\"},\"spellCheckingEnabled\":{\"$\":\"False\"},\"multiplicity\":{\"$\":\"ZeroOrMore\"},\"visibility\":{\"$\":\"NormallyHidden\"},\"writingSystems\":{\"id\":[{\"$\":\"qaa\"}]},\"index\":\"13\"}]}}";
	
	function testGetSettingUserFieldsSettingCommand_MutilEntries() {
		// a exists user profile
		$command = new GetSettingUserFieldsSettingCommand(new LexProjectMockObject(),"user1");
		$result = $command->execute();
		$this->assertEqual(count($result["fields"]["field"]), 13);
		$this->assertEqual(json_encode($result),$this->FINAL_RESULT);
		
		// not exists user profile, use system default
		//$command = new GetSettingUserFieldsSettingCommand(new LexProjectMockObject(),"blahblah");
		//$result = $command->execute();
		//$this->assertEqual(count($result["fields"]["field"]), 13);
		//$this->assertEqual(json_encode($result),$this->FINAL_RESULT);
	}
}

?>