---

- name: Deploy development environment for beta.scriptureforge.org
  hosts: all
  become: yes
  vars_files:
    - "vars/{{deploy}}.yml"
    # conditional import
    -
      - "vars/{{ansible_distribution}}-{{ansible_distribution_major_version | int}}.yml"
      - "vars/{{ansible_distribution}}.yml"
      - "vars/{{ansible_os_family}}.yml"
      - "vars/os_defaults.yml"
  vars:
    node_version: 8.11.4
  pre_tasks:
    - name: "Add .NET Core | add source"
      apt_repository:
        repo: "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-{{base_distribution_release}}-prod {{base_distribution_release}} main"
        state: present
      when: base_distribution == 'ubuntu'
    - name: "Add .NET Core | add key"
      apt_key:
        id: BE1229CF
        url: https://packages.microsoft.com/keys/microsoft.asc
        keyring: /etc/apt/trusted.gpg.d/microsoft.gpg
      when: base_distribution == 'ubuntu'
    - name: "Add GeoIP Update | add source"
      apt_repository:
        repo: "ppa:maxmind/ppa"
        state: present
      when: base_distribution == 'ubuntu'
    - name: add Mongo apt key
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
    - name: add Mongo 3.6 repository
      apt_repository:
        repo: "deb [arch=amd64] https://repo.mongodb.org/apt/ubuntu {{base_distribution_release}}/mongodb-org/3.6 multiverse"
        filename: mongodb-org-3.6
        update_cache: yes
      when: base_distribution == 'ubuntu' and (base_distribution_release == 'xenial' or base_distribution_release == 'bionic')
  roles:
    - fix
    # locale_install may be needed if locale has been changed away from defaults
#    - locale_install
    - ssl_config
    - apache_config
  tasks:
    - name: install packages
      apt: name="{{item}}" state=present update_cache='yes'
      with_items:
        - dotnet-sdk-2.1
        - geoipupdate
        - mongodb-org
        - nodejs
        - default-jre-headless
      tags: [ 'packages' ]

    - name: check for node binary
      stat: path=/usr/local/bin/node
      register: node_binary

    - name: symlink node to nodejs
      file: src=/usr/bin/nodejs dest=/usr/local/bin/node state=link
      when: node_binary.stat.exists == False

    - name: install n
      shell: npm install -g n
      args:
        creates: /usr/local/bin/n

    - name: change node version
      shell: "n {{node_version}}"

    - name: install gulp cli
      shell: npm install -g gulp-cli
      args:
        creates: /usr/local/bin/gulp

    # This stanza ensures that the /var/www/virtual/default_local links to wherever your source actually is.
    - name: "Ensure Source Link: default_local folder does not exist (localhost)"
      file: path="/var/www/default_local" state=absent force=true
      when: inventory_hostname == "localhost"
    - name: "Ensure Source Link: Get current location of the source code (localhost)"
      local_action: shell pwd
      register: local_dir
      when: inventory_hostname == "localhost"
    - name: "Ensure Source Link: default_local link exists (localhost)"
      file: src="{{local_dir.stdout | dirname | dirname | realpath}}" dest="/var/www/default_local" state=link group=www-data force=true
      when: inventory_hostname == "localhost"

    - name: Ensure folder permissions
      # see http://stackoverflow.com/questions/28778738/ansible-mode-755-for-directories-and-644-for-files-recursively
      file:
        path: "{{item.path}}"
        state: directory
        mode: "{{item.mode}}"
        recurse: yes
      with_items:
        - path: "{{lf_path}}/src"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{sf_path}}/src"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{lf_path}}/test"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{sf_path}}/test"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{lf_path}}/docs"
          mode: 'u=rwX,g=rX,o=rX'
        - path: "{{sf_path}}/docs"
          mode: 'u=rwX,g=rX,o=rX'

    - name: Ensure www-data has permission to folders
      # see http://stackoverflow.com/questions/28778738/ansible-mode-755-for-directories-and-644-for-files-recursively
      file:
        path: "{{item.path}}"
        state: directory
        group: www-data
        mode: "{{item.mode}}"
        recurse: yes
      with_items:
        - path: "{{lf_path}}/src/assets"
          mode: 'u=rwX,g=rwX'
        - path: "{{sf_path}}/src/assets"
          mode: 'u=rwX,g=rwX'
        - path: "{{lf_path}}/src/cache"
          mode: 'u=rwX,g=rwX'
        - path: "{{sf_path}}/src/cache"
          mode: 'u=rwX,g=rwX'

    - name: Set Apache umask to 002
      lineinfile:
        dest: /etc/apache2/envvars
        regexp: '^umask \d+'
        line: 'umask 002'
        backrefs: no
      notify: Restart apache

    - name: update the mongo config file
      lineinfile:
        dest: /etc/mongod.conf
        regexp: '^(\s*dbPath: ).*$'
        line: '\1{{mongo_path}}'
        backrefs: yes
      notify: restart mongod
    - name: ensure mongod service is running (and enable it at boot)

      # Note that the mongodb-org packages install a service named "mongod", not "mongodb"
      service:
        name: mongod
        state: started
        enabled: yes

    - name: 'Add GeoLite2 configuration'
      copy:
        content: |
          # The following UserId and LicenseKey are required placeholders:
          UserId 999999
          LicenseKey 000000000000

          # Include one or more of the following ProductIds:
          # * GeoLite2-City - GeoLite 2 City
          # * GeoLite2-Country - GeoLite2 Country
          # * GeoLite-Legacy-IPv6-City - GeoLite Legacy IPv6 City
          # * GeoLite-Legacy-IPv6-Country - GeoLite Legacy IPv6 Country
          # * 506 - GeoLite Legacy Country
          # * 517 - GeoLite Legacy ASN
          # * 533 - GeoLite Legacy City
          ProductIds GeoLite2-City
        dest: /etc/GeoIP.conf

    - name: 'Fetch GeoLite2 database'
      shell: /usr/bin/geoipupdate

    - name: add localhost to dnsmasq
      lineinfile:
        dest: /etc/NetworkManager/dnsmasq.d/localhost-domain
        line: "{{item}}"
        state: present
        create: yes
        mode: 'u=rw,g=r,o=r'
      with_items:
        - "address=/localhost/127.0.0.1"
        - "address=/localhost/::1"
      when: inventory_hostname == "localhost"
      notify: restart network
      tags: [ 'network' ]

    - name: add host aliases
      lineinfile:
        dest: /etc/hosts
        regexp: '\s{{item}}'
        line: "127.0.0.1    {{item}}"
        state: present
        create: yes
      with_items:
        - "languageforge.local"
        - "scriptureforge.local"
        - "beta.scriptureforge.local"
        - "es_401"
      when: inventory_hostname == "localhost"

  handlers:
    - name: restart mongod
      service: name=mongod state=restarted

    - name: restart network
      service: name=network-manager state=restarted
