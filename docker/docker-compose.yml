# https://docs.docker.com/compose/compose-file
version: '3.5'
services:
  ui-builder:
    build:
      context: ..
      dockerfile: docker/ui-builder/Dockerfile
    image: lf-ui-builder
    container_name: lf-ui-builder
    command: npm run build:dev
    volumes:
      # share dist folder between ui and api containers
      - lf-ui-dist:/data/src/dist

      # for developer convenience volume map
      - ../webpack.config.js:/data/webpack.config.js
      - ../webpack-dev.config.js:/data/webpack-dev.config.js
      - ../webpack-prd.config.js:/data/webpack-prd.config.js
      - ../package.json:/data/package.json
      - ../package-lock.json:/data/package-lock.json

      # needed this volume mapping so changes to typescript would be reflected in running app, actually rebundled and outpt to dist which is then shared to the app container.
      - ../src/angular-app:/data/src/angular-app

  app:
    build:
      context: ..
      dockerfile: docker/app/Dockerfile
    image: lf-app
    container_name: lf-app
    depends_on:
      - db
      - mail
      - ld-api
    environment:
      - WAIT_HOSTS=db:27017, mail:25
      - LDAPI_BASE_URL=http://ld-api:3000/api/v2/
      # LDAPI_BASE_URL hostname and port need to match container name and port of the ld-api container (defined further down)
      # TODO: Make a run.sh that sets umask and then runs apache2-foreground

      - ENVIRONMENT=development
      - DATABASE=scriptureforge
      - MONGODB_CONN=mongodb://db:27017
      # only when ENVIRONMENT=production will BUGSNAG_API_KEY be utilized.
      # - BUGSNAG_API_KEY=some-key
      - GOOGLE_CLIENT_ID=bogus-development-token
      - GOOGLE_CLIENT_SECRET=bogus-development-token
      - FACEBOOK_CLIENT_ID=bogus-development-token
      - FACEBOOK_CLIENT_SECRET=bogus-development-token
      - REMEMBER_ME_SECRET=bogus-development-key
      - LANGUAGE_DEPOT_API_TOKEN=bogus-development-token
    command: sh -c "/wait && umask 0002 && apache2-foreground"
    volumes:
      # persist user data uploads and assets
      - lf-user-data-assets:/var/www/src/assets

      # share dist folder between ui and api containers
      - lf-ui-dist:/var/www/html/dist

      # for developer convenience
      - ../src/Api:/var/www/src/Api
      - ../src/Site:/var/www/src/Site

      # needed this volume mapping so changes to partials would be reflected in running app.
      - ../src/angular-app:/var/www/src/angular-app

  ssl:
    image: caddy
    container_name: lf-ssl
    ports:
      - 80:80
      - 443:443
    depends_on:
      - app
    volumes:
      - lf-caddy-data:/data
      - lf-caddy-config:/config
    # https://caddyserver.com/docs/command-line
    command: caddy reverse-proxy --from localhost --to app
    restart: unless-stopped

  mail:
    build:
      context: .
      dockerfile: mail/Dockerfile
    image: lf-mail
    container_name: lf-mail

  db:
    image: mongo:4.0
    container_name: lf-db
    ports:
      # exposed this to host for admin tools
      - 27017:27017
    volumes:
      - ./db/init.js:/docker-entrypoint-initdb.d/init.js
      - lf-mongo-data:/data/db
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=scriptureforge

  selenium:
    # image: selenium/standalone-chrome
    image: selenium/standalone-chrome-debug
    volumes:
      - /dev/shm:/dev/shm
    ports:
      - "5900:5900"

  ld-sql:
    build:
      context: ld-sql
    image: ld-sql
    container_name: ld-sql
    # To access the MySQL database via localhost:3306 on your dev machine (e.g., in VS Code), uncomment the "ports" config below
    # Note that if you're running MySQL on your dev machine already, change the first number to something else, like 3307 and access localhost:3307
    # ports:
    #   - 3306:3306
    env_file: ld-api/ld.env

  ld-api:
    build:
      context: ld-api
    image: ld-api
    container_name: ld-api
    depends_on:
      - ld-sql
    # env_file should be same one given to ld-sql image
    env_file: ld-api/ld.env
    environment:
      - PORT=3000

  test-e2e:
    build:
      context: ..
      dockerfile: docker/test-e2e/Dockerfile
    image: test-e2e
    container_name: test-e2e
    depends_on:
      - db
      - app-for-e2e
      - mail
      - selenium
    environment:
      - WAIT_HOSTS=db:27017, mail:25, selenium:4444
      - ENVIRONMENT=development
      - LANGUAGE_DEPOT_API_TOKEN=bogus-development-token
    command: sh -c "/wait && /run.sh"
    volumes:
      # for developer convenience
      - ../src:/data/src
      - ../typings:/data/typings
      - ../webpack.config.js:/data/webpack.config.js
      - ../webpack-dev.config.js:/data/webpack-dev.config.js
      - ../webpack-prd.config.js:/data/webpack-prd.config.js
      - ../package.json:/data/package.json
      - ../package-lock.json:/data/package-lock.json
# uncomment on dev machine for convenience but don't commit - it messes up the e2e test run by
# clobbering the JS files produced by tsc in the built image.
#      - ../test:/data/test

  app-for-e2e:
    build:
      context: ..
      dockerfile: docker/app-for-e2e/Dockerfile
    image: app-for-e2e
    container_name: app-for-e2e
    depends_on:
      - db
      - mail
    environment:
      - WAIT_HOSTS=db:27017, mail:25
      - LDAPI_BASE_URL=http://ld-api:3000/api/v2/
      - ENVIRONMENT=development
      - DATABASE=scriptureforge_test
      - MONGODB_CONN=mongodb://db:27017
      - REMEMBER_ME_SECRET=bogus-development-key
      - LANGUAGE_DEPOT_API_TOKEN=bogus-development-token
    command: sh -c "/wait && /run.sh"

  test-php:
    # TODO: get XDebug working with VSCode
    build:
      context: ..
      dockerfile: docker/test-php/Dockerfile
    image: test-php
    container_name: test-php
    depends_on:
      - db
      - mail
    environment:
      - WAIT_HOSTS=db:27017, mail:25
      - ENVIRONMENT=development
      - DATABASE=scriptureforge_test
      - MONGODB_CONN=mongodb://db:27017
      - LANGUAGE_DEPOT_API_TOKEN=bogus-development-token
    command: sh -c "/wait && /run.sh"
    volumes:
      # for developer convenience
      - ../test:/var/www/test
      - ../src/Api:/var/www/src/Api
      - ../src/Site:/var/www/src/Site

volumes:
  lf-caddy-config:
  lf-caddy-data:
  lf-mongo-data:
  lf-user-data-assets:
  lf-ui-dist:
